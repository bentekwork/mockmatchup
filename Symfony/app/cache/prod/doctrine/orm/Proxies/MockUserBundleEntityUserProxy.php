<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class MockUserBundleEntityUserProxy extends \Mock\UserBundle\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function getGuid()
    {
        $this->__load();
        return parent::getGuid();
    }

    public function setGuid($guid)
    {
        $this->__load();
        return parent::setGuid($guid);
    }

    public function getUsername()
    {
        $this->__load();
        return parent::getUsername();
    }

    public function setUsername($username)
    {
        $this->__load();
        return parent::setUsername($username);
    }

    public function getSalt()
    {
        $this->__load();
        return parent::getSalt();
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function getRoles()
    {
        $this->__load();
        return parent::getRoles();
    }

    public function eraseCredentials()
    {
        $this->__load();
        return parent::eraseCredentials();
    }

    public function equals(\Symfony\Component\Security\Core\User\UserInterface $user)
    {
        $this->__load();
        return parent::equals($user);
    }

    public function setSalt($salt)
    {
        $this->__load();
        return parent::setSalt($salt);
    }

    public function setAccessToken($accessToken)
    {
        $this->__load();
        return parent::setAccessToken($accessToken);
    }

    public function getAccessToken()
    {
        $this->__load();
        return parent::getAccessToken();
    }

    public function setAccessTokenSecret($accessTokenSecret)
    {
        $this->__load();
        return parent::setAccessTokenSecret($accessTokenSecret);
    }

    public function getAccessTokenSecret()
    {
        $this->__load();
        return parent::getAccessTokenSecret();
    }

    public function setVerifier($verifier)
    {
        $this->__load();
        return parent::setVerifier($verifier);
    }

    public function getVerifier()
    {
        $this->__load();
        return parent::getVerifier();
    }

    public function setOauthSessionHandle($oauthSessionHandle)
    {
        $this->__load();
        return parent::setOauthSessionHandle($oauthSessionHandle);
    }

    public function getOauthSessionHandle()
    {
        $this->__load();
        return parent::getOauthSessionHandle();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'username', 'guid', 'salt', 'password', 'access_token', 'access_token_secret', 'verifier', 'oauth_session_handle', 'league');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}